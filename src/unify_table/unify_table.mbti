// Generated using `moon info`, DON'T EDIT IT
package "BigOrangeQWQ/unification_table/unify_table"

import(
  "BigOrangeQWQ/unification_table/snapshot_array"
)

// Values
fn[T : Eq] new(capacity~ : Int) -> UnificationTable[T]

fn new_index(Int) -> VarIndex

fn new_snapshot(@snapshot_array.Snapshot) -> Snapshot

fn[T : Eq] new_var_value(T, Int, VarIndex) -> VarValue[T]

// Errors

// Types and methods
pub struct Snapshot {
  snapshot : @snapshot_array.Snapshot
}

pub struct UnificationTable[T] {
  values : @snapshot_array.SnapshotArray[VarValue[T]]
}
fn[T] UnificationTable::commit(Self[T], Snapshot) -> Unit
fn[T : Eq] UnificationTable::find(Self[T], VarIndex) -> VarIndex
fn[T : Eq] UnificationTable::find_root(Self[T], VarValue[T]) -> VarValue[T]
fn[T : Eq] UnificationTable::get(Self[T], Int) -> VarValue[T]?
fn[T] UnificationTable::in_snapshot(Self[T]) -> Bool
fn[T : Eq] UnificationTable::index(Self[T], Int) -> VarIndex
fn[T : Eq] UnificationTable::op_get(Self[T], Int) -> VarValue[T]
fn[T : Eq] UnificationTable::op_set(Self[T], Int, VarValue[T]) -> Unit
fn[T : Eq] UnificationTable::push(Self[T], T) -> Unit
fn[T : Eq] UnificationTable::push_var(Self[T], VarValue[T]) -> Unit
fn[T : Eq] UnificationTable::redirect_root(Self[T], Int, VarIndex, VarIndex, T) -> Unit
fn[T : Eq] UnificationTable::reset(Self[T]) -> Unit
fn[T] UnificationTable::rollback_to(Self[T], Snapshot) -> Unit
fn[T : Eq] UnificationTable::set(Self[T], VarIndex, VarValue[T]) -> Unit
fn[T] UnificationTable::start_snapshot(Self[T]) -> Snapshot
fn[T : Eq] UnificationTable::unioned(Self[T], VarIndex, VarIndex) -> Bool
fn[T : Eq] UnificationTable::unite(Self[T], VarIndex, VarIndex, T) -> VarIndex
fn[T : Eq] UnificationTable::update(Self[T], VarIndex, (VarValue[T]) -> VarValue[T]) -> Unit
fn[T : Eq] UnificationTable::value(Self[T], VarIndex) -> VarValue[T]
impl[T : Show] Show for UnificationTable[T]

pub struct VarIndex {
  index : Int
}
impl Show for VarIndex

pub struct VarValue[T] {
  mut value : T
  mut rank : Int
  mut parent : VarIndex
}
fn[T : Eq] VarValue::modify(Self[T], T) -> Unit
fn[T : Eq] VarValue::redirect(Self[T], VarIndex) -> Self[T]
fn[T : Eq] VarValue::root(Self[T], Int, T) -> Self[T]
impl[T : Eq] Eq for VarValue[T]
impl[T : Show] Show for VarValue[T]

// Type aliases

// Traits

