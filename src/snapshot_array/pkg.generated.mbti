// Generated using `moon info`, DON'T EDIT IT
package "BigOrangeQWQ/unification_table/snapshot_array"

import(
  "BigOrangeQWQ/unification_table/undo_logs"
)

// Values

// Errors

// Types and methods
pub struct Snapshot {
  undo_count : Int
}

pub struct SnapshotArray[T] {
  logs : @undo_logs.UndoLogs[T]
  values : Array[T]
}
fn[T] SnapshotArray::action_since_snapshot(Self[T], Snapshot) -> ArrayView[@undo_logs.Undo[T]]
fn[T] SnapshotArray::commit(Self[T], Snapshot) -> Unit
fn[T] SnapshotArray::commit_all(Self[T]) -> Unit
fn[T] SnapshotArray::extend(Self[T], Iter[T]) -> Unit
fn[T] SnapshotArray::from_iter(Iter[T], capacity? : Int) -> Self[T]
fn[T] SnapshotArray::get(Self[T], Int) -> T?
fn[T] SnapshotArray::in_snapshot(Self[T]) -> Bool
fn[T] SnapshotArray::length(Self[T]) -> Int
fn[T] SnapshotArray::new(capacity? : Int) -> Self[T]
fn[T] SnapshotArray::of(FixedArray[T]) -> Self[T]
fn[T] SnapshotArray::op_get(Self[T], Int) -> T
fn[T] SnapshotArray::op_set(Self[T], Int, T) -> Unit
fn[T] SnapshotArray::push(Self[T], T) -> Unit
fn[T] SnapshotArray::record(Self[T], @undo_logs.Undo[T]) -> Bool
fn[T] SnapshotArray::reset(Self[T]) -> Unit
fn[T] SnapshotArray::rollback(Self[T]) -> Unit
fn[T] SnapshotArray::rollback_to(Self[T], Snapshot) -> Unit
fn[T] SnapshotArray::set(Self[T], Int, T) -> Unit
fn[T] SnapshotArray::set_all(Self[T], (T) -> T) -> Unit
fn[T] SnapshotArray::start_snapshot(Self[T]) -> Snapshot

// Type aliases

// Traits

