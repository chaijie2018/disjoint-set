// Generated using `moon info`, DON'T EDIT IT
package "BigOrangeQWQ/unification_table/undo_logs"

// Values
fn[T] from_iter(Iter[Undo[T]], capacity? : Int) -> UndoLogs[T]

fn[T] newElem(Int) -> Undo[T]

fn[T] setElem(Int, T) -> Undo[T]

// Errors

// Types and methods
pub enum Undo[T] {
  NewElem(Int)
  SetElem(Int, T)
}
impl[T : Eq] Eq for Undo[T]
impl[T : Show] Show for Undo[T]

pub struct UndoLogs[T] {
  logs : Array[Undo[T]]
  mut num_open_snapshots : Int
}
fn[T] UndoLogs::action_since_snapshot(Self[T], Int) -> ArrayView[Undo[T]]
fn[T] UndoLogs::clear(Self[T]) -> Unit
fn[T] UndoLogs::commit(Self[T], Int) -> Unit
fn[T] UndoLogs::extend(Self[T], Iter[Undo[T]]) -> Unit
fn[T] UndoLogs::has_changes(Self[T], Int) -> Bool
fn[T] UndoLogs::in_snapshot(Self[T]) -> Bool
fn[T] UndoLogs::iter(Self[T]) -> Iter[Undo[T]]
fn[T] UndoLogs::last(Self[T]) -> Undo[T]?
fn[T] UndoLogs::length(Self[T]) -> Int
fn[T] UndoLogs::new(capacity? : Int) -> Self[T]
fn[T] UndoLogs::num_open_snapshots(Self[T]) -> Int
fn[T] UndoLogs::pop(Self[T]) -> Undo[T]?
fn[T] UndoLogs::push(Self[T], Undo[T]) -> Unit
fn[T] UndoLogs::rollback_to(Self[T], Int) -> Array[Undo[T]]
fn[T] UndoLogs::start_snapshot(Self[T]) -> Int

// Type aliases

// Traits

